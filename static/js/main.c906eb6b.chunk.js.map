{"version":3,"sources":["webauthn.js","App.js","serviceWorker.js","index.js"],"names":["enc","TextEncoder","binToStr","bin","btoa","Uint8Array","reduce","s","byte","String","fromCharCode","createCreds","publicKey","challenge","rp","name","user","id","from","window","atob","c","charCodeAt","displayName","pubKeyCredParams","type","alg","authenticatorSelection","userVerification","timeout","excludeCredentials","extensions","appidExclude","navigator","credentials","create","then","res","localStorage","setItem","rawId","catch","err","validateCreds","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","AUTH_CHALLENGE","extractedData","dataFromClient","retrievedChallenge","wrap","_context","prev","next","getItem","rpId","encode","allowCredentials","str","get","sent","console","log","clientDataJSON","response","JSON","parse","origin","alert","stop","apply","this","arguments","buttonStyle","padding","margin","App","react_default","createElement","className","style","height","src","alt","href","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c906eb6b.chunk.js","sourcesContent":["\r\n///////// START UTIL FUNCTIONS /////////\r\n// easy way to go from string to ByteArray\r\nconst enc = new TextEncoder();\r\n\r\n// another function to go from string to ByteArray, but we first encode the\r\n// string as base64 - note the use of the atob() function\r\nfunction strToBin(str) {\r\n    return Uint8Array.from(atob(str), c => c.charCodeAt(0));\r\n}\r\n\r\n// function to encode raw binary to string, which is subsequently\r\n// encoded to base64 - note the use of the btoa() function\r\nfunction binToStr(bin) {\r\n    return btoa(new Uint8Array(bin).reduce(\r\n        (s, byte) => s + String.fromCharCode(byte), ''\r\n    ));\r\n}\r\n///////// END UTIL FUNCTIONS /////////\r\n\r\n///////// START WEBAUTHN FUNCTIONS /////////\r\nconst createCreds = ()=> {\r\n\r\n    ////// START server generated info //////\r\n    // the below \"publicKey\" variable is typically generated by your server - here for DEMO purposes only\r\n    // const publicKey = {\r\n    //     // random, cryptographically secure, at least 16 bytes\r\n    //     challenge: enc.encode('someRandomStringThatSHouldBeReLLYLoooong&Random'),\r\n    //     // relying party\r\n    //     rp: {    \r\n    //         name: 'Your awesome company' // sample relying party\r\n    //     },\r\n    //     user: {\r\n    //         id: enc.encode('dvas0004'),\r\n    //         name: 'David Vassallo',\r\n    //         displayName: 'dvas0004'\r\n    //     },\r\n    //     authenticatorSelection: { \r\n    //         userVerification: \"preferred\" \r\n    //     },\r\n    //     attestation: 'direct',\r\n    //     pubKeyCredParams: [\r\n    //         {\r\n    //         type: \"public-key\", alg: -7 // \"ES256\" IANA COSE Algorithms registry\r\n    //         }\r\n    //     ]\r\n    // }\r\n    var publicKey = {\r\n        // The challenge is produced by the server; see the Security Considerations\r\n        challenge: new Uint8Array([21,31,105 /* 29 more random bytes generated by the server */]),\r\n      \r\n        // Relying Party:\r\n        rp: {\r\n          name: \"ACME Corporation\"\r\n        },\r\n      \r\n        // User:\r\n        user: {\r\n          id: Uint8Array.from(window.atob(\"MIIBkzCCATigAwIBAjCCAZMwggE4oAMCAQIwggGTMII=\"), c=>c.charCodeAt(0)),\r\n          name: \"alex.mueller@example.com\",\r\n          displayName: \"Alex Müller\",\r\n        },\r\n      \r\n        // This Relying Party will accept either an ES256 or RS256 credential, but\r\n        // prefers an ES256 credential.\r\n        pubKeyCredParams: [\r\n          {\r\n            type: \"public-key\",\r\n            alg: -7 // \"ES256\" as registered in the IANA COSE Algorithms registry\r\n          },\r\n          {\r\n            type: \"public-key\",\r\n            alg: -257 // Value registered by this specification for \"RS256\"\r\n          }\r\n        ],\r\n      \r\n        authenticatorSelection: {\r\n          // Try to use UV if possible. This is also the default.\r\n          userVerification: \"preferred\"\r\n        },\r\n      \r\n        timeout: 360000,  // 6 minutes\r\n        excludeCredentials: [\r\n          // Don’t re-register any authenticator that has one of these credentials\r\n          {\"id\": Uint8Array.from(window.atob(\"ufJWp8YGlibm1Kd9XQBWN1WAw2jy5In2Xhon9HAqcXE=\"), c=>c.charCodeAt(0)), \"type\": \"public-key\"},\r\n          {\"id\": Uint8Array.from(window.atob(\"E/e1dhZc++mIsz4f9hb6NifAzJpF1V4mEtRlIPBiWdY=\"), c=>c.charCodeAt(0)), \"type\": \"public-key\"}\r\n        ],\r\n      \r\n        // Make excludeCredentials check backwards compatible with credentials registered with U2F\r\n        extensions: {\"appidExclude\": \"https://acme.example.com\"}\r\n      };\r\n      \r\n    ////// END server generated info //////\r\n    \r\n    // browser receives the publicKey object and passes it to WebAuthn \"create\" API\r\n    // const res = await navigator.credentials.create({\r\n    //         publicKey: publicKey\r\n    //     })\r\n\r\n    // console.log(res);\r\n    //alert(navigator.credentials)\r\n    navigator.credentials.create({ publicKey })\r\n  .then(function (res) {\r\n      // Below two lines store the most important info - the ID representing the created credentials\r\n    // Typically they are sent via POST to your server, not stored locally - here for DEMO purposes only\r\n    localStorage.setItem('rawId', binToStr(res.rawId));\r\n    localStorage.setItem('id', binToStr(res.id));\r\n    // Send new credential info to server for verification and registration.\r\n  }).catch(function (err) {\r\n    // No acceptable authenticator or user refused consent. Handle appropriately.\r\n  });\r\n\r\n    \r\n        \r\n}\r\n\r\nconst validateCreds = async function(){\r\n    \r\n    ////// START server generated info //////\r\n    // Usually the below publicKey object is constructed on your server\r\n    // here for DEMO purposes only\r\n    const rawId = localStorage.getItem('rawId');\r\n    const AUTH_CHALLENGE = 'someRandomString';\r\n    const publicKey = {\r\n        // your domain\r\n        rpId: \"92587ba8.ngrok.io\",\r\n        // random, cryptographically secure, at least 16 bytes\r\n        challenge: enc.encode(AUTH_CHALLENGE),\r\n        allowCredentials: [{\r\n          id: strToBin(rawId),\r\n          type: 'public-key'\r\n        }],\r\n        authenticatorSelection: { \r\n            userVerification: \"preferred\" \r\n          },\r\n    };\r\n    ////// END server generated info //////\r\n\r\n    // browser receives the publicKey object and passes it to WebAuthn \"get\" API\r\n    const res = await navigator.credentials.get({\r\n        publicKey: publicKey\r\n      })\r\n\r\n    \r\n    console.log(res);\r\n\r\n    // here we build an object containing the results, to be sent to the server\r\n    // usually \"extractedData\" is POSTed to your server\r\n    const extractedData = {\r\n        id: res.id,\r\n        rawId: binToStr(res.rawId),\r\n        clientDataJSON: binToStr(res.response.clientDataJSON)\r\n    }\r\n\r\n    // Usually done on the server, this is where you make your auth checks\r\n    // here for DEMO purposes only\r\n    const dataFromClient = JSON.parse(atob(extractedData.clientDataJSON));\r\n    const retrievedChallenge = atob(dataFromClient.challenge);\r\n    const retrievedOrigin = dataFromClient.origin;\r\n\r\n    // At MINIMUM, your auth checks should be:\r\n    // 1. Check that the retrieved challenge matches the auth challenge you sent to the client, as we do trivially below\r\n    // 2. Check that \"retrievedOrigin\" matches your domain - otherwise this might be a phish - not shown here\r\n    console.log(retrievedChallenge);\r\n    if (retrievedChallenge == AUTH_CHALLENGE){\r\n        alert(\"Authorized\");\r\n    } else {\r\n        alert(\"Unauthorized\");\r\n    }\r\n}\r\n\r\n///////// END WEBAUTHN FUNCTIONS /////////\r\n\r\nexport {createCreds, validateCreds}","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nimport { createCreds, validateCreds } from './webauthn';\r\n\r\nconst buttonStyle = {\r\n  padding: 10,\r\n  margin: 5\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n\r\n          <img style={{\r\n              height: \"20vh\"\r\n            }} \r\n            src=\"cyber-security.svg\" \r\n            alt=\"\" />\r\n          \r\n          <p>\r\n            WebAuthn API Demo\r\n          </p>\r\n          \r\n          <p>\r\n            <a href=\"https://blog.davidvassallo.me\">Check blog post for more details</a>\r\n          </p>\r\n          \r\n          <button \r\n            style={buttonStyle} \r\n            onClick={createCreds}\r\n          >\r\n            Register Creds\r\n          </button>\r\n\r\n          <button \r\n            style={buttonStyle} \r\n            onClick={validateCreds}\r\n          >\r\n            Validate Creds\r\n          </button>\r\n\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}